# -*- coding: utf-8 -*-
"""Cyber Ass__1,3,4,5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1up4w_IrALFS5i8j6gSYTzkyXii3tcg9B

## **Cyber 1 - nMap**
"""

# LINUX

sudo apt-get install nmap

# 1. To scan a System with Hostname and IP address. First, Scan using Hostname

nmap www.geeksforgeeks.org

# Now let’s Scan using IP Address

nmap 172.217.27.174

# --------------------------------------------------

# 2. To scan using “-v” option.

nmap -v www.geeksforgeeks.org

-----------------------------------------------------

# 3. To scan multiple hosts

nmap 103.76.228.244 157.240.198.35 172.217.27.174

-----------------------------------------------------

# 4. To scan whole subnet

nmap 103.76.228.*


-----------------------------------------------------

# 5. To scan specific range of IP address

nmap 192.168.29.1-20


-----------------------------------------------------

# 6. To scan to detect firewall settings.

sudo nmap -sA 103.76.228.244


----------------------------------------------------

# 7. To identify Hostnames

sudo nmap -sL  103.76.228.244


----------------------------------------------------

# 10.  Here -sS flag is used for TCP SYN Scan, Which is a stealthy and efficient method of scanning for open ports on a target system.

nmap -sS <Domain Name>
nmap -sS www.geeksforgeeks.org

----------------------------------------------------

"""# **Cyber 3 - AES**"""

!pip install cryptography

from cryptography.fernet import Fernet

# Generate a key
def generate_key():
    return Fernet.generate_key()

# Encrypt message
def encrypt_message(key, message):
    fernet = Fernet(key)
    encrypted = fernet.encrypt(message.encode())
    return encrypted

# Decrypt message
def decrypt_message(key, encrypted_message):
    fernet = Fernet(key)
    decrypted = fernet.decrypt(encrypted_message).decode()
    return decrypted

# Demo
key = generate_key()
print("Generated Key:", key)

message = "This is a secret message."
encrypted = encrypt_message(key, message)
print("Encrypted:", encrypted)

decrypted = decrypt_message(key, encrypted)
print("Decrypted:", decrypted)

"""# **Cyber 4 - RSA**"""

!pip install cryptography

from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes, serialization

# Generate RSA keys
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
public_key = private_key.public_key()

# Encrypt message
def encrypt_rsa(public_key, message):
    return public_key.encrypt(
        message.encode(),
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )

# Decrypt message
def decrypt_rsa(private_key, encrypted_message):
    return private_key.decrypt(
        encrypted_message,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    ).decode()

# Demo
msg = "Hello RSA"
encrypted = encrypt_rsa(public_key, msg)
print("Encrypted:", encrypted)

decrypted = decrypt_rsa(private_key, encrypted)
print("Decrypted:", decrypted)

"""# **Cyber 5 - Play Cifer**"""

def generate_key_square(key):
    key = key.upper().replace("J", "I")
    result = []
    for c in key:
        if c not in result and c.isalpha():
            result.append(c)
    for c in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if c not in result:
            result.append(c)
    return [result[i:i+5] for i in range(0, 25, 5)]

def find_position(char, key_square):
    for i in range(5):
        for j in range(5):
            if key_square[i][j] == char:
                return i, j
    return None, None

def prepare_text(text):
    text = text.upper().replace("J", "I")
    text = ''.join(filter(str.isalpha, text))
    result = ''
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i+1] if i+1 < len(text) else 'X'
        if a == b:
            result += a + 'X'
            i += 1
        else:
            result += a + b
            i += 2
    if len(result) % 2 != 0:
        result += 'X'
    return result

def encrypt_playfair(key, plaintext):
    key_square = generate_key_square(key)
    plaintext = prepare_text(plaintext)
    ciphertext = ''

    for i in range(0, len(plaintext), 2):
        a, b = plaintext[i], plaintext[i+1]
        row1, col1 = find_position(a, key_square)
        row2, col2 = find_position(b, key_square)

        if row1 == row2:
            ciphertext += key_square[row1][(col1+1)%5]
            ciphertext += key_square[row2][(col2+1)%5]
        elif col1 == col2:
            ciphertext += key_square[(row1+1)%5][col1]
            ciphertext += key_square[(row2+1)%5][col2]
        else:
            ciphertext += key_square[row1][col2]
            ciphertext += key_square[row2][col1]
    return ciphertext

def decrypt_playfair(key, ciphertext):
    key_square = generate_key_square(key)
    plaintext = ''

    for i in range(0, len(ciphertext), 2):
        a, b = ciphertext[i], ciphertext[i+1]
        row1, col1 = find_position(a, key_square)
        row2, col2 = find_position(b, key_square)

        if row1 == row2:
            plaintext += key_square[row1][(col1-1)%5]
            plaintext += key_square[row2][(col2-1)%5]
        elif col1 == col2:
            plaintext += key_square[(row1-1)%5][col1]
            plaintext += key_square[(row2-1)%5][col2]
        else:
            plaintext += key_square[row1][col2]
            plaintext += key_square[row2][col1]
    return plaintext

# Demo
key = "SECRETKEY"
text = "HELLO WORLD"
encrypted = encrypt_playfair(key, text)
decrypted = decrypt_playfair(key, encrypted)

print("Encrypted (Playfair):", encrypted)
print("Decrypted (Playfair):", decrypted)